<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI 모델 테스트</title>
    <!-- 부트스트랩 CSS 추가 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>

<!-- 부트스트랩 JS 추가 -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        // 파일 업로드 버튼 클릭 이벤트 처리
        document.getElementById('uploadButton').addEventListener('click', function() {
            // 파일 선택 input 엘리먼트를 생성
            var input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.onchange = function(event) {
                var file = event.target.files[0];
                if (file) {
                    // 이미지 파일이 선택되었을 때의 처리
                    var formData = new FormData();
                    formData.append('uploadFile', file);

                    // /ai/getimg 로 POST 요청 보내기
                    fetch('/AI/getimg', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        // 응답 데이터 처리
                        console.log(data); // 응답 데이터 출력 또는 원하는 작업 수행

                        // 이미지를 화면에 표시하기 전에 이전 이미지를 삭제
                        var existingImage = document.getElementById('uploadedImage');
                        if (existingImage) {
                            existingImage.remove();
                        }

                        // 새로운 이미지를 화면에 표시
                        var imgElement = document.createElement('img');
                        imgElement.id = 'uploadedImage';
                        imgElement.src = data.imagePath; // 서버로부터 받은 이미지 경로 설정
                        imgElement.style.width = '300px'; // 이미지의 너비를 부모 요소인 imageBox의 너비에 맞춤
                        imgElement.style.height = '300px'; // 이미지의 높이를 자동으로 조절하여 비율 유지
                        imgElement.classList.add('uploaded-image'); // 이미지에 클래스 추가

                        // 이미지를 imageBox에 추가
                        var imageBox = document.getElementById('imageBox');
                        imageBox.innerHTML = ''; // 이미지가 여러 번 추가되는 것을 방지하기 위해 기존 내용을 지움
                        imageBox.appendChild(imgElement); // 이미지를 imageBox에 추가
                    })
                    .catch(error => {
                        // 오류 처리
                        console.error('오류 발생:', error);
                    });
                }
            };

            // 파일 선택 창 열기
            input.click();
        });

        // 테스트 버튼 클릭 이벤트 처리
        document.getElementById('testButton').addEventListener('click', function() {
            submitForm();
        });

        // submitForm 함수 정의
        function submitForm() {
            // 이미지 파일의 이름 가져오기
            var imageName = document.getElementById('uploadedImage') ? document.getElementById('uploadedImage').src : '';
            var fileName = imageName.substring(imageName.lastIndexOf('/') + 1);

            // hidden input 요소에 이미지 파일 이름 설정
            document.getElementById('imageFileName').value = fileName;

            // 폼 제출
            document.getElementById('testForm').submit();
        }

        function openModal(result) {
            var modal = document.getElementById('resultModal');
            var resultText = document.getElementById('resultText');

            // 결과를 모달에 추가
            resultText.textContent = result;

            // 모달 표시
            modal.style.display = "block";
        }

        // 모달 닫기 함수
        function closeModal() {
            var modal = document.getElementById('resultModal');

            // 모달 닫기
            modal.style.display = "none";
        }
    });
</script>

<div class="container-fluid px-4">
    <h1 class="mt-4">AI 모델 테스트</h1>
    <hr class="my-4">
  
    <div class="card mb-4">
        <div class="card-body">
            <p class="mb-0">AI 모델이 정상적으로 작동하는지 동작 테스트를 진행할 수 있다.</p>
        </div>
    </div>
</div>

<div class="container">
    <div class="col justify-content-center align-items-center" style="margin-left: 300px">
        <div class="col-md-6 text-center"> <!-- 왼쪽 박스: 모델 정보 -->
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">모델 정보</h5>
                    <!-- 이 부분은 서버 코드로 대체되어야 합니다 -->
                    <!-- 서버에서 모델 정보를 가져와서 출력하는 부분 -->
                    <!-- 예시로 <%= selectedModel.model_name %>과 <%= selectedModel.model_type %>을 사용했는데 이 부분은 실제 서버 코드에 맞게 수정되어야 합니다 -->
                    <p class="card-text">모델 이름: <%= selectedModel.model_name %></p>
                    <p class="card-text">모델 타입: <%= selectedModel.model_type %></p>
                    <hr>
                    <div id="imageBox">
                        <!-- 이미지가 표시될 영역 -->
                    </div>
                    <button class="btn btn-primary mt-3" id="uploadButton">파일 선택</button>
                </div>
            </div>
        </div>

        <div class="col-md-6 text-center"> <!-- 오른쪽 박스: 테스트 버튼 -->
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">테스트</h5>
                    <form id="testForm" action="/AI/classify" method="post">
                        <input type="hidden" id="imageFileName" name="imageFileName">
                        <!-- 테스트 버튼 -->
                        <button class="btn btn-success" type="button" id="testButton">테스트</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- 결과를 표시할 모달 -->
    <div id="resultModal" class="modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <
